package com.my.company.codegen;

import com.google.common.base.Strings;

import io.swagger.models.properties.*;
import io.swagger.v3.oas.models.media.ArraySchema;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.media.StringSchema;

import java.io.File;
import java.util.*;

import org.openapitools.codegen.*;
import org.openapitools.codegen.utils.ModelUtils;
import org.openapitools.codegen.utils.StringUtils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.openapitools.codegen.utils.StringUtils.camelize;
import static org.openapitools.codegen.utils.StringUtils.underscore;

public class MyCodegenGenerator extends DefaultCodegen implements CodegenConfig {
  private static final Logger LOGGER = LoggerFactory.getLogger(MyCodegenGenerator.class);

  // source folder where to write the files
  protected String sourceFolder = "src";
  protected String apiVersion = "1.0.0";
  protected String packageName = "openapi";
  protected String packageVersion = "1.0.0";

  protected String apiFolder = "src/apis";
  protected String modelFolder = "src/models";

  /**
   * Configures the type of generator.
   * 
   * @return  the CodegenType for this generator
   * @see     org.openapitools.codegen.CodegenType
   */
  public CodegenType getTag() {
    return CodegenType.OTHER;
  }

  /**
   * Configures a friendly name for the generator.  This will be used by the generator
   * to select the library with the -g flag.
   * 
   * @return the friendly name for the generator
   */
  public String getName() {
    return "my-codegen";
  }

  // /**
  //  * Provides an opportunity to inspect and modify operation data before the code is generated.
  //  */
  // @SuppressWarnings("unchecked")
  // @Override
  // public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {

  //   // to try debugging your code generator:
  //   // set a break point on the next line.
  //   // then debug the JUnit test called LaunchGeneratorInDebugger

  //   Map<String, Object> results = super.postProcessOperationsWithModels(objs, allModels);

  //   Map<String, Object> ops = (Map<String, Object>)results.get("operations");
  //   ArrayList<CodegenOperation> opList = (ArrayList<CodegenOperation>)ops.get("operation");

  //   // iterate over the operation and perhaps modify something
  //   for(CodegenOperation co : opList){
  //     // example:
  //     // co.httpMethod = co.httpMethod.toLowerCase();
  //   }

  //   return results;
  // }

  /**
   * Returns human-friendly help for the generator.  Provide the consumer with help
   * tips, parameters here
   * 
   * @return A string value for the help message
   */
  public String getHelp() {
    return "Generates a my-codegen client library.";
  }

  public MyCodegenGenerator() {
    super();

    // set the output folder here
    outputFolder = "generated-code/my-codegen";

    /**
     * Models.  You can write model files using the modelTemplateFiles map.
     * if you want to create one template for file, you can do so here.
     * for multiple files for model, just put another entry in the `modelTemplateFiles` with
     * a different extension
     */
    modelTemplateFiles.put(
      "model.mustache", // the template to use
      ".rs");       // the extension for each file to write

    /**
     * Api classes.  You can write classes for each Api file with the apiTemplateFiles map.
     * as with models, add multiple entries with different extensions for multiple files per
     * class
     */
    apiTemplateFiles.put(
      "api.mustache",   // the template to use
      ".rs");       // the extension for each file to write

    /**
     * Template Location.  This is the location which templates will be read from.  The generator
     * will use the resource stream to attempt to read the templates.
     */
    templateDir = "my-codegen";

    /**
     * Api Package.  Optional, if needed, this can be used in templates
     */
    apiPackage = "org.openapitools.api";

    /**
     * Model Package.  Optional, if needed, this can be used in templates
     */
    modelPackage = "org.openapitools.model";

    setReservedWordsLowerCase(
            Arrays.asList(
                    "abstract", "alignof", "as", "become", "box",
                    "break", "const", "continue", "crate", "do",
                    "else", "enum", "extern", "false", "final",
                    "fn", "for", "if", "impl", "in",
                    "let", "loop", "macro", "match", "mod",
                    "move", "mut", "offsetof", "override", "priv",
                    "proc", "pub", "pure", "ref", "return",
                    "Self", "self", "sizeof", "static", "struct",
                    "super", "trait", "true", "type", "typeof",
                    "unsafe", "unsized", "use", "virtual", "where",
                    "while", "yield"
            )
    );

    defaultIncludes = new HashSet<String>(
            Arrays.asList(
                    "map",
                    "array")
    );

    languageSpecificPrimitives = new HashSet<String>(
            Arrays.asList(
                    "i8", "i16", "i32", "i64",
                    "u8", "u16", "u32", "u64",
                    "f32", "f64",
                    "char", "bool", "String", "Vec<u8>", "File")
    );

    /**
     * Additional Properties.  These values can be passed to the templates and
     * are available in models, apis, and supporting files
     */
    additionalProperties.put("apiVersion", apiVersion);

    // /**
    //  * Supporting Files.  You can write single files for the generator with the
    //  * entire object tree available.  If the input file has a suffix of `.mustache
    //  * it will be processed by the template engine.  Otherwise, it will be copied
    //  */
    // supportingFiles.add(new SupportingFile("myFile.mustache",   // the input template or file
    //   "",                                                       // the destination folder, relative `outputFolder`
    //   "myFile.sample")                                          // the output file
    // );

    instantiationTypes.clear();
    /*instantiationTypes.put("array", "GoArray");
    instantiationTypes.put("map", "GoMap");*/

    typeMapping.clear();
    typeMapping.put("integer", "i32");
    typeMapping.put("long", "i64");
    typeMapping.put("number", "f32");
    typeMapping.put("float", "f32");
    typeMapping.put("double", "f64");
    typeMapping.put("boolean", "bool");
    typeMapping.put("string", "String");
    typeMapping.put("UUID", "String");
    typeMapping.put("URI", "String");
    typeMapping.put("date", "string");
    typeMapping.put("DateTime", "String");
    typeMapping.put("password", "String");
    // TODO(bcourtine): review file mapping.
    // I tried to map as "std::io::File", but Reqwest multipart file requires a "AsRef<Path>" param.
    // Getting a file from a Path is simple, but the opposite is difficult. So I map as "std::path::Path".
    typeMapping.put("file", "std::path::PathBuf");
    typeMapping.put("binary", "crate::models::File");
    typeMapping.put("ByteArray", "String");
    typeMapping.put("object", "serde_json::Value");
  }

  public void setPackageName(String packageName) {
      this.packageName = packageName;
  }

  public void setPackageVersion(String packageVersion) {
      this.packageVersion = packageVersion;
  }

  @Override
  public void processOpts() {
      super.processOpts();

      if (additionalProperties.containsKey(CodegenConstants.PACKAGE_NAME)) {
          setPackageName((String) additionalProperties.get(CodegenConstants.PACKAGE_NAME));
      } else {
          setPackageName("openapi");
      }

      if (additionalProperties.containsKey(CodegenConstants.PACKAGE_VERSION)) {
          setPackageVersion((String) additionalProperties.get(CodegenConstants.PACKAGE_VERSION));
      } else {
          setPackageVersion("1.0.0");
      }

      additionalProperties.put(CodegenConstants.PACKAGE_NAME, packageName);
      additionalProperties.put(CodegenConstants.PACKAGE_VERSION, packageVersion);

      modelPackage = packageName;
      apiPackage = packageName;

      supportingFiles.add(new SupportingFile("model_mod.mustache", modelFolder, "mod.rs"));
      supportingFiles.add(new SupportingFile("lib.mustache", "src", "lib.rs"));
      supportingFiles.add(new SupportingFile("Cargo.mustache", "", "Cargo.toml"));

      supportingFiles.add(new SupportingFile("configuration.mustache", apiFolder, "configuration.rs"));
      supportingFiles.add(new SupportingFile("client.mustache", apiFolder, "client.rs"));
      supportingFiles.add(new SupportingFile("api_mod.mustache", apiFolder, "mod.rs"));
  }

  @Override
  public Map<String, Object> postProcessModels(Map<String, Object> objs) {
      // process enum in models
      return postProcessModelsEnum(objs);
  }

  @SuppressWarnings({"static-method", "unchecked"})
  public Map<String, Object> postProcessAllModels(Map<String, Object> objs) {
      // Index all CodegenModels by model name.
      Map<String, CodegenModel> allModels = new HashMap<>();
      for (Map.Entry<String, Object> entry : objs.entrySet()) {
          String modelName = toModelName(entry.getKey());
          Map<String, Object> inner = (Map<String, Object>) entry.getValue();
          List<Map<String, Object>> models = (List<Map<String, Object>>) inner.get("models");
          for (Map<String, Object> mo : models) {
              CodegenModel cm = (CodegenModel) mo.get("model");
              allModels.put(modelName, cm);
          }
      }
      for (Map.Entry<String, Object> entry : objs.entrySet()) {
          Map<String, Object> inner = (Map<String, Object>) entry.getValue();
          List<Map<String, Object>> models = (List<Map<String, Object>>) inner.get("models");
          for (Map<String, Object> mo : models) {
              CodegenModel cm = (CodegenModel) mo.get("model");
              if (cm.discriminator != null) {
                  List<Object> discriminatorVars = new ArrayList<>();
                  for(CodegenDiscriminator.MappedModel mappedModel: cm.discriminator.getMappedModels()) {
                      CodegenModel model = allModels.get(mappedModel.getModelName());
                      Map<String, Object> mas = new HashMap<>();
                      mas.put("modelName", camelize(mappedModel.getModelName()));
                      mas.put("mappingName", mappedModel.getMappingName());
                      List<CodegenProperty> vars = model.getVars();
                      vars.removeIf(p -> p.name.equals(cm.discriminator.getPropertyName()));
                      mas.put("vars", vars);
                      discriminatorVars.add(mas);
                  }
                  // TODO: figure out how to properly have the original property type that didn't go through toVarName
                  cm.vendorExtensions.put("tagName", cm.discriminator.getPropertyName().replace("_", ""));
                  cm.vendorExtensions.put("mappedModels", discriminatorVars);
              }
          }
      }
      return objs;
  }
  
  @Override
  public String escapeReservedWord(String name) {
      if (this.reservedWordsMappings().containsKey(name)) {
          return this.reservedWordsMappings().get(name);
      }
      return '_' + name;
  }

  @Override
  public String apiFileFolder() {
      return (outputFolder + File.separator + apiFolder).replace("/", File.separator);
  }

  public String modelFileFolder() {
      return (outputFolder + File.separator + modelFolder).replace("/", File.separator);
  }

  @Override
  public String toVarName(String name) {
      // replace - with _ e.g. created-at => created_at
      name = sanitizeName(name.replaceAll("-", "_"));

      // if it's all uppper case, do nothing
      if (name.matches("^[A-Z_]*$"))
          return name;

      // snake_case, e.g. PetId => pet_id
      name = underscore(name);

      // for reserved word or word starting with number, append _
      if (isReservedWord(name))
          name = escapeReservedWord(name);

      // for reserved word or word starting with number, append _
      if (name.matches("^\\d.*"))
          name = "var_" + name;

      return name;
  }

  @Override
  public String toParamName(String name) {
      return toVarName(name);
  }

  @Override
  public String toModelName(String name) {
      // camelize the model name
      // phone_number => PhoneNumber
      return camelize(toModelFilename(name));
  }

  @Override
  public String toModelFilename(String name) {

      if (!Strings.isNullOrEmpty(modelNamePrefix)) {
          name = modelNamePrefix + "_" + name;
      }

      if (!Strings.isNullOrEmpty(modelNameSuffix)) {
          name = name + "_" + modelNameSuffix;
      }

      name = sanitizeName(name);

      // model name cannot use reserved keyword, e.g. return
      if (isReservedWord(name)) {
          LOGGER.warn(name + " (reserved word) cannot be used as model name. Renamed to " + ("model_" + name));
          name = "model_" + name; // e.g. return => ModelReturn (after camelize)
      }

      // model name starts with number
      if (name.matches("^\\d.*")) {
          LOGGER.warn(name + " (model name starts with number) cannot be used as model name. Renamed to " + ("model_" + name));
          name = "model_" + name; // e.g. 200Response => Model200Response (after camelize)
      }

      return underscore(name);
  }

  @Override
  public String toApiFilename(String name) {
      // replace - with _ e.g. created-at => created_at
      name = name.replaceAll("-", "_"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.

      // e.g. PetApi.rs => pet_api.rs
      return underscore(name) + "_api";
  }

  @Override
  public String getTypeDeclaration(Schema p) {
      if (ModelUtils.isArraySchema(p)) {
          ArraySchema ap = (ArraySchema) p;
          Schema inner = ap.getItems();
          if (inner == null) {
              LOGGER.warn(ap.getName() + "(array property) does not have a proper inner type defined.Default to string");
              inner = new StringSchema().description("TODO default missing array inner type to string");
          }
          return "Vec<" + getTypeDeclaration(inner) + ">";
      } else if (ModelUtils.isMapSchema(p)) {
          Schema inner = ModelUtils.getAdditionalProperties(p);
          if (inner == null) {
              LOGGER.warn(p.getName() + "(map property) does not have a proper inner type defined. Default to string");
              inner = new StringSchema().description("TODO default missing map inner type to string");
          }
          return "::std::collections::HashMap<String, " + getTypeDeclaration(inner) + ">";
      }

      // Not using the supertype invocation, because we want to UpperCamelize
      // the type.
      String schemaType = getSchemaType(p);
      if (typeMapping.containsKey(schemaType)) {
          return typeMapping.get(schemaType);
      }

      if (typeMapping.containsValue(schemaType)) {
          return schemaType;
      }

      if (languageSpecificPrimitives.contains(schemaType)) {
          return schemaType;
      }

      // return fully-qualified model name
      // crate::models::{{classnameFile}}::{{classname}}
      return "crate::models::" + toModelName(schemaType);
  }

  @Override
  public String getSchemaType(Schema p) {
      String schemaType = super.getSchemaType(p);
      String type = null;
      if (typeMapping.containsKey(schemaType)) {
          type = typeMapping.get(schemaType);
          if (languageSpecificPrimitives.contains(type))
              return (type);
      } else
          type = schemaType;
      return type;
  }

  @Override
  public String toOperationId(String operationId) {
      String sanitizedOperationId = sanitizeName(operationId);

      // method name cannot use reserved keyword, e.g. return
      if (isReservedWord(sanitizedOperationId)) {
          LOGGER.warn(operationId + " (reserved word) cannot be used as method name. Renamed to " + StringUtils.underscore("call_" + operationId));
          sanitizedOperationId = "call_" + sanitizedOperationId;
      }

      return StringUtils.underscore(sanitizedOperationId);
  }

  @Override
  public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {
      @SuppressWarnings("unchecked")
      Map<String, Object> objectMap = (Map<String, Object>) objs.get("operations");
      @SuppressWarnings("unchecked")
      List<CodegenOperation> operations = (List<CodegenOperation>) objectMap.get("operation");
      for (CodegenOperation operation : operations) {
          // http method verb conversion, depending on client library (e.g. Hyper: PUT => Put, Reqwest: PUT => put)
          // if (HYPER_LIBRARY.equals(getLibrary())) {
          //     operation.httpMethod = StringUtils.camelize(operation.httpMethod.toLowerCase(Locale.ROOT));
          // } else if (REQWEST_LIBRARY.equals(getLibrary())) {
          //     operation.httpMethod = operation.httpMethod.toLowerCase(Locale.ROOT);
          // }

          // update return type to conform to rust standard
          /*
          if (operation.returnType != null) {
              if ( operation.returnType.startsWith("Vec") && !languageSpecificPrimitives.contains(operation.returnBaseType)) {
                  // array of model
                  String rt = operation.returnType;
                  int end = rt.lastIndexOf(">");
                  if ( end > 0 ) {
                      operation.vendorExtensions.put("x-returnTypeInMethod", "Vec<super::" + rt.substring("Vec<".length(), end).trim() + ">");
                      operation.returnContainer = "List";
                  }
              } else if (operation.returnType.startsWith("::std::collections::HashMap<String, ") && !languageSpecificPrimitives.contains(operation.returnBaseType)) {
                  LOGGER.info("return base type:" + operation.returnBaseType);
                  // map of model
                  String rt = operation.returnType;
                  int end = rt.lastIndexOf(">");
                  if ( end > 0 ) {
                      operation.vendorExtensions.put("x-returnTypeInMethod", "::std::collections::HashMap<String, super::" + rt.substring("::std::collections::HashMap<String, ".length(), end).trim() + ">");
                      operation.returnContainer = "Map";
                  }
              } else if (!languageSpecificPrimitives.contains(operation.returnType)) {
                  // add super:: to model, e.g. super::pet
                  operation.vendorExtensions.put("x-returnTypeInMethod", "super::" + operation.returnType);
              } else {
                  // primitive type or array/map of primitive type
                  operation.vendorExtensions.put("x-returnTypeInMethod", operation.returnType);
              }
          }
          for (CodegenParameter p : operation.allParams) {
              if (p.isListContainer && !languageSpecificPrimitives.contains(p.dataType)) {
                  // array of model
                  String rt = p.dataType;
                  int end = rt.lastIndexOf(">");
                  if ( end > 0 ) {
                      p.dataType = "Vec<" + rt.substring("Vec<".length(), end).trim() + ">";
                  }
              } else if (p.isMapContainer && !languageSpecificPrimitives.contains(p.dataType)) {
                  // map of model
                  String rt = p.dataType;
                  int end = rt.lastIndexOf(">");
                  if ( end > 0 ) {
                      p.dataType = "::std::collections::HashMap<String, super::" + rt.substring("::std::collections::HashMap<String, ".length(), end).trim() + ">";
                  }
              } else if (!languageSpecificPrimitives.contains(p.dataType)) {
                  // add super:: to model, e.g. super::pet
                  p.dataType = "super::" + p.dataType;
              }
          }*/
      }

      return objs;
  }

  @Override
  protected boolean needToImport(String type) {
      return !defaultIncludes.contains(type)
              && !languageSpecificPrimitives.contains(type);
  }

  /**
   * override with any special text escaping logic to handle unsafe
   * characters so as to avoid code injection
   *
   * @param input String to be cleaned up
   * @return string with unsafe characters removed or escaped
   */
  @Override
  public String escapeUnsafeCharacters(String input) {
    //TODO: check that this logic is safe to escape unsafe characters to avoid code injection
    return input;
  }

  /**
   * Escape single and/or double quote to avoid code injection
   *
   * @param input String to be cleaned up
   * @return string with quotation mark removed or escaped
   */
  public String escapeQuotationMark(String input) {
    //TODO: check that this logic is safe to escape quotation mark to avoid code injection
    return input.replace("\"", "\\\"");
  }

  @Override
  public String toEnumValue(String value, String datatype) {
      if ("int".equals(datatype) || "double".equals(datatype) || "float".equals(datatype)) {
          return value;
      } else {
          return escapeText(value);
      }
  }

  @Override
  public String toEnumDefaultValue(String value, String datatype) {
      return datatype + "_" + value;
  }

  @Override
  public String toEnumVarName(String name, String datatype) {
      if (name.length() == 0) {
          return "Empty";
      }

      // number
      if ("int".equals(datatype) || "double".equals(datatype) || "float".equals(datatype)) {
          String varName = name;
          varName = varName.replaceAll("-", "Minus");
          varName = varName.replaceAll("\\+", "Plus");
          varName = varName.replaceAll("\\.", "Dot");
          return varName;
      }

      // for symbol, e.g. $, #
      if (getSymbolName(name) != null) {
          return getSymbolName(name);
      }

      // string
      String enumName = sanitizeName(camelize(name));
      enumName = enumName.replaceFirst("^_", "");
      enumName = enumName.replaceFirst("_$", "");

      if (isReservedWord(enumName) || enumName.matches("\\d.*")) { // reserved word or starts with number
          return escapeReservedWord(enumName);
      } else {
          return enumName;
      }
  }

  @Override
  public String toEnumName(CodegenProperty property) {
      // camelize the enum name
      // phone_number => PhoneNumber
      String enumName = camelize(toModelName(property.name));

      // remove [] for array or map of enum
      enumName = enumName.replace("[]", "");

      if (enumName.matches("\\d.*")) { // starts with number
          return "_" + enumName;
      } else {
          return enumName;
      }
  }

  @Override
  public String toDefaultValue(Schema p) {
      if (p.getDefault() != null) {
          return p.getDefault().toString();
      } else {
          return null;
      }
  }
}